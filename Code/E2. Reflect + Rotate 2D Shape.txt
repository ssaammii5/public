// 2D Shape: Reflection then Rotation
#include <graphics.h>
#include <iostream>
#include <cmath>
#include <conio.h>
using namespace std;

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");

    // Window center
    int w = getmaxx(), h = getmaxy();
    int ox = w/2, oy = h/2;

    // Read polygon
    int n;
    cout << "Enter number of vertices: ";
    cin  >> n;
    int x[20], y[20];
    for (int i = 0; i < n; ++i) {
        cout << "Enter vertex " << i << " (x y) relative to center: ";
        cin  >> x[i] >> y[i];
    }

    // Read reflection axis and rotation angle
    cout << "Choose reflection axis (1 = X-axis, 2 = Y-axis): ";
    int axis;
    cin  >> axis;
    cout << "Enter rotation angle in degrees: ";
    double angle;
    cin  >> angle;

    // First: reflect about chosen axis
    int rx1[20], ry1[20];
    for (int i = 0; i < n; ++i) {
        if (axis == 1) {        // reflect across X-axis
            rx1[i] =  x[i];
            ry1[i] = -y[i];
        } else {                // reflect across Y-axis
            rx1[i] = -x[i];
            ry1[i] =  y[i];
        }
    }

    // Compute centroid of reflected shape
    double cx = 0, cy = 0;
    for (int i = 0; i < n; ++i) {
        cx += rx1[i];
        cy += ry1[i];
    }
    cx /= n;
    cy /= n;

    // Precompute rotation
    const double PI = acos(-1);
    double rad = angle * PI / 180.0;

    // Second: rotate about centroid
    int fx[20], fy[20];
    for (int i = 0; i < n; ++i) {
        double tx = rx1[i] - cx;
        double ty = ry1[i] - cy;
        double rnx = tx * cos(rad) - ty * sin(rad);
        double rny = tx * sin(rad) + ty * cos(rad);
        fx[i] = (int)(rnx + cx);
        fy[i] = (int)(rny + cy);
    }

    // Draw original shape in WHITE
    setcolor(WHITE);
    for (int i = 0; i < n; ++i) {
        int j = (i + 1) % n;
        line(ox +  x[i], oy -  y[i],
             ox +  x[j], oy -  y[j]);
    }

    // Draw reflected+rotated shape in YELLOW
    setcolor(YELLOW);
    for (int i = 0; i < n; ++i) {
        int j = (i + 1) % n;
        line(ox + fx[i], oy - fy[i],
             ox + fx[j], oy - fy[j]);
    }

    getch();
    closegraph();
    return 0;
}
