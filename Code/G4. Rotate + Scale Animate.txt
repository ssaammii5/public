#include <graphics.h>
#include <iostream>
#include <cmath>
#include <conio.h>
using namespace std;

void drawPoly(int x[], int y[], int n, int ox, int oy, int color) {
    setcolor(color);
    for (int i = 0; i < n; ++i) {
        int j = (i + 1) % n;
        line(ox + x[i], oy - y[i], ox + x[j], oy - y[j]);
    }
}

int main() {
    int gd = DETECT, gm;
    initgraph(&gd, &gm, "");
    int w = getmaxx(), h = getmaxy();
    int ox = w / 2, oy = h / 2;

    int n;
    cout << "Enter number of vertices: ";
    cin >> n;
    int x[20], y[20];
    for (int i = 0; i < n; ++i) {
        cout << "Vertex " << i << " (x y) relative to center: ";
        cin >> x[i] >> y[i];
    }

    double angle, sxFactor, syFactor;
    cout << "Enter rotation angle in degrees: ";
    cin >> angle;
    double radTarget = angle * acos(-1) / 180.0;

    cout << "Enter scaling factors (sx sy): ";
    cin >> sxFactor >> syFactor;

    // Compute centroid
    double cx = 0, cy = 0;
    for (int i = 0; i < n; ++i) {
        cx += x[i];
        cy += y[i];
    }
    cx /= n;
    cy /= n;

    const int steps = 60;
    int fx[20], fy[20];

    // Phase 1: animate rotation
    for (int s = 0; s <= steps; ++s) {
        double t = (double)s / steps;
        double curRad = radTarget * t;
        for (int i = 0; i < n; ++i) {
            double dx = x[i] - cx;
            double dy = y[i] - cy;
            double rx = dx * cos(curRad) - dy * sin(curRad);
            double ry = dx * sin(curRad) + dy * cos(curRad);
            double fx_d = rx + cx;
            double fy_d = ry + cy;
            fx[i] = int(fx_d + (fx_d > 0 ? 0.5 : -0.5));
            fy[i] = int(fy_d + (fy_d > 0 ? 0.5 : -0.5));
        }
        cleardevice();
        drawPoly(x, y, n, ox, oy, WHITE);
        drawPoly(fx, fy, n, ox, oy, YELLOW);
        delay(50);
    }

    // Store fully rotated coordinates
    double rotFullX[20], rotFullY[20];
    for (int i = 0; i < n; ++i) {
        double dx = x[i] - cx;
        double dy = y[i] - cy;
        rotFullX[i] = dx * cos(radTarget) - dy * sin(radTarget) + cx;
        rotFullY[i] = dx * sin(radTarget) + dy * cos(radTarget) + cy;
    }

    // Phase 2: animate scaling of the rotated polygon
    for (int s = 0; s <= steps; ++s) {
        double t = (double)s / steps;
        double curSX = 1 + (sxFactor - 1) * t;
        double curSY = 1 + (syFactor - 1) * t;
        for (int i = 0; i < n; ++i) {
            double dx = rotFullX[i] - cx;
            double dy = rotFullY[i] - cy;
            double sx = dx * curSX;
            double sy = dy * curSY;
            double fx_d = sx + cx;
            double fy_d = sy + cy;
            fx[i] = int(fx_d + (fx_d > 0 ? 0.5 : -0.5));
            fy[i] = int(fy_d + (fy_d > 0 ? 0.5 : -0.5));
        }
        cleardevice();
        drawPoly(x, y, n, ox, oy, WHITE);
        drawPoly(fx, fy, n, ox, oy, YELLOW);
        delay(50);
    }

    getch();
    closegraph();
    return 0;
}
