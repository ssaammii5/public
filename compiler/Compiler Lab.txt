Lab 1--Write a C program to identify whether a given line is a comment or not. 

#include <stdio.h>
#include <string.h>

int main() {
    char line[1000];
    printf("Enter a line:\n");
    if (!fgets(line, sizeof(line), stdin))
        return 1;

    // Remove trailing newline, if any
    int len = strlen(line);
    if (len > 0 && line[len-1] == '\n')
        line[--len] = '\0';

    // Skip leading spaces and tabs
    char *p = line;
    while (*p == ' ' || *p == '\t')
        p++;

    if (p[0]=='/' && p[1]=='/') {
        printf("This is a single-line comment.\n");
    }
    else if (p[0]=='/' && p[1]=='*') {
        // check if the closing */ is on the same line
        if (strstr(p+2, "*/"))
            printf("This is a complete /*…*/ comment.\n");
        else
            printf("This is the start of a block comment.\n");
    }
    else if (len >= 2 && p[len-2]=='*' && p[len-1]=='/') {
        printf("This is the end of a block comment.\n");
    }
    else {
        printf("This is NOT a comment line.\n");
    }

    return 0;
}




Lab 2 --Write a C program to recognize strings under 'a', 'a*b+', 'abb'.

#include <stdio.h>
#include <string.h>

// Check if s matches the pattern a* b+
// (zero or more 'a's followed by one or more 'b's)
int is_a_star_b_plus(const char *s) {
    int i = 0;
    // skip all leading 'a'
    while (s[i] == 'a') {
        i++;
    }
    // now we need at least one 'b'
    int count_b = 0;
    while (s[i] == 'b') {
        count_b++;
        i++;
    }
    // accept only if we saw ≥1 'b' and then end of string
    return (count_b >= 1 && s[i] == '\0');
}

int main() {
    char str[100];

    printf("Enter a string: ");
    if (scanf("%99s", str) != 1) {
        puts("Input error.");
        return 1;
    }

    if (strcmp(str, "a") == 0) {
        printf("Accepted: matches \"a\"\n");
    }
    else if (strcmp(str, "abb") == 0) {
        printf("Accepted: matches \"abb\"\n");
    }
    else if (is_a_star_b_plus(str)) {
        printf("Accepted: matches pattern \"a*b+\"\n");
    }
    else {
        printf("Rejected: does not match any of {\"a\", \"a*b+\", \"abb\"}\n");
    }

    return 0;
}




Lab 3--Write a C program to test whether a given identifier is valid or not.

#include <stdio.h>
#include <ctype.h>
#include <string.h>

// List of C keywords to reject as identifiers
const char *keywords[] = {
    "auto","break","case","char","const","continue","default","do","double",
    "else","enum","extern","float","for","goto","if","inline","int","long",
    "register","restrict","return","short","signed","sizeof","static","struct",
    "switch","typedef","union","unsigned","void","volatile","while","_Alignas",
    "_Alignof","_Atomic","_Bool","_Complex","_Generic","_Imaginary","_Noreturn",
    "_Static_assert","_Thread_local",
    NULL
};

// Check if the string is one of the C keywords
int is_keyword(const char *s) {
    for (int i = 0; keywords[i] != NULL; i++) {
        if (strcmp(s, keywords[i]) == 0)
            return 1;
    }
    return 0;
}

// Check identifier syntax: start with letter or '_', rest letters/digits/'_'
int is_valid_identifier(const char *s) {
    if (s[0] == '\0')            // empty string → invalid
        return 0;
    if (!(isalpha((unsigned char)s[0]) || s[0] == '_'))
        return 0;               // must start with letter or underscore

    for (int i = 1; s[i] != '\0'; i++) {
        if (!(isalnum((unsigned char)s[i]) || s[i] == '_'))
            return 0;           // only letters, digits, or underscore allowed
    }

    if (is_keyword(s))
        return 0;               // cannot be a reserved keyword

    return 1;                   // passed all checks
}

int main(void) {
    char id[100];

    printf("Enter an identifier: ");
    if (scanf("%99s", id) != 1) {
        fprintf(stderr, "Input error\n");
        return 1;
    }

    if (is_valid_identifier(id))
        printf("\"%s\" is a valid C identifier.\n", id);
    else
        printf("\"%s\" is NOT a valid C identifier.\n", id);

    return 0;
}


Lab 4--Write a program to recognize of tokens from lexemes.

#include <stdio.h>
#include <string.h>
#include <ctype.h>

const char *keywords[] = {"int", "float", "if", "else", "return", NULL};
const char *operators[] = {"+", "-", "*", "/", "=", "==", "!=", "<", ">", "<=", ">=", NULL};
const char *delimiters = ";,(){}";

int isKeyword(const char *word) {
    for (int i = 0; keywords[i]; i++)
        if (strcmp(word, keywords[i]) == 0)
            return 1;
    return 0;
}

int isOperator(char c) {
    return strchr("+-*/=<>!", c) != NULL;
}

int isDelimiter(char c) {
    return strchr(delimiters, c) != NULL;
}

int main() {
    char input[1000];
    printf("Enter a line of code:\n");
    fgets(input, sizeof(input), stdin);

    int i = 0;
    while (input[i] != '\0') {
        // Skip whitespace
        if (isspace(input[i])) {
            i++;
            continue;
        }

        // Identifier or keyword
        if (isalpha(input[i]) || input[i] == '_') {
            char word[100];
            int j = 0;
            while (isalnum(input[i]) || input[i] == '_') {
                word[j++] = input[i++];
            }
            word[j] = '\0';
            if (isKeyword(word))
                printf("<KEYWORD,\t'%s'>\n", word);
            else
                printf("<IDENTIFIER,\t'%s'>\n", word);
        }

        // Number
        else if (isdigit(input[i])) {
            char num[100];
            int j = 0;
            while (isdigit(input[i])) {
                num[j++] = input[i++];
            }
            num[j] = '\0';
            printf("<NUMBER,\t'%s'>\n", num);
        }

        // Multi-character operators
        else if ((input[i] == '=' || input[i] == '!' || input[i] == '<' || input[i] == '>') && input[i+1] == '=') {
            printf("<OPERATOR,\t'%c%c'>\n", input[i], input[i+1]);
            i += 2;
        }

        // Single-character operators
        else if (isOperator(input[i])) {
            printf("<OPERATOR,\t'%c'>\n", input[i]);
            i++;
        }

        // Delimiters
        else if (isDelimiter(input[i])) {
            printf("<DELIMITER,\t'%c'>\n", input[i]);
            i++;
        }

        // Unknown characters
        else {
            printf("<UNKNOWN,\t'%c'>\n", input[i]);
            i++;
        }
    }

    return 0;
}


Lab 5--Write a program to recognize blank, white space, tab, and newline.

#include <stdio.h>

int main() {
    char ch;
    int position = 1;

    printf("Input: \n");

    while ((ch = getchar()) != EOF) {
        if (ch == ' ') {
            printf("Blank (space) found at position %d\n", position);
        } else if (ch == '\t') {
            printf("Tab found at position %d\n", position);
        } else if (ch == '\n') {
            printf("Newline found at position %d\n", position);
        }
        position++;
    }

    return 0;
}


Lab 6--Write a C program to simulate lexical analyzer for validating operators. 

#include <stdio.h>
#include <string.h>

// List of valid C operators
const char *validOperators[] = {
    "+", "-", "*", "/", "=", "==", "!=", "<", ">", "<=", ">=",
    "++", "--", "+=", "-=", "*=", "/=", "%=", "&", "|", "&&", "||",
    "^", "~", ">>", "<<", ">>=", "<<=", "&=", "|=", "^=", "!", "%",
    "?", ":", NULL
};

// Function to check if input is a valid operator
int isValidOperator(const char *op) {
    for (int i = 0; validOperators[i] != NULL; i++) {
        if (strcmp(op, validOperators[i]) == 0)
            return 1;
    }
    return 0;
}

int main() {
    char op[10];

    printf("Enter an operator (1 to 3 characters): ");
    scanf("%s", op);

    if (isValidOperator(op)) {
        printf(" \"%s\" is a valid operator.\n", op);
    } else {
        printf(" \"%s\" is NOT a valid operator.\n", op);
    }

    return 0;
}




Lab 7 --Write a C program for constructing of LL (1) parsing. 
#include <bits/stdc++.h>
using namespace std;

// —————— LL(1) TABLE CONSTRUCTION ——————

vector<string> NT = {"E","E'","T","T'","F"};
vector<string> T  = {"id","+","*","(",")","$"};

map<pair<string,string>,string> table_;

void buildTable(){
    // E → T E'
    table_[{"E","id"}] = "T E'";
    table_[{"E","("}]  = "T E'";

    // E' → + T E'  | ε
    table_[{"E'","+"}] = "+ T E'";
    table_[{"E'",")"}] = "epsilon";
    table_[{"E'","$"}] = "epsilon";

    // T → F T'
    table_[{"T","id"}] = "F T'";
    table_[{"T","("}]  = "F T'";

    // T' → * F T' | ε
    table_[{"T'","*"}] = "* F T'";
    table_[{"T'","+"}] = "epsilon";
    table_[{"T'",")"}] = "epsilon";
    table_[{"T'","$"}] = "epsilon";

    // F → id | ( E )
    table_[{"F","id"}] = "id";
    table_[{"F","("}]  = "( E )";
}

void printTable(){
    cout << "\nLL(1) Parsing Table:\n\n";
    cout << setw(8) << "NT \\ t";
    for(auto &t : T) cout << setw(12) << t;
    cout << "\n" << string(8 + 12 * T.size(), '-') << "\n";
    for(auto &A : NT){
        cout << setw(8) << A;
        for(auto &a : T){
            auto it = table_.find({A,a});
            if(it != table_.end())
                cout << setw(12) << (A + "->" + it->second);
            else
                cout << setw(12) << "";
        }
        cout << "\n";
    }
}

// —————— PREDICTIVE PARSER ——————

stack<string> st;
vector<string> input;
int ip = 0;

void pushRev(const vector<string>& symbols) {
    for (int i = symbols.size() - 1; i >= 0; --i)
        if (symbols[i] != "epsilon")
            st.push(symbols[i]);
}

int main() {
    buildTable();
    printTable();

    cout << "\nEnter space-separated input (e.g., id + id * id): ";
    string line;
    getline(cin, line);
    stringstream ss(line);
    string tok;
    while (ss >> tok) input.push_back(tok);
    input.push_back("$");

    st.push("$");
    st.push("E");

    cout << "\nParsing Steps:\n";
    while (!st.empty()) {
        string top = st.top();
        string cur = input[ip];

        // Match terminals
        if (top == cur) {
            cout << "Match: " << top << "\n";
            st.pop();
            // Do NOT advance past the final $
            if (cur != "$") ip++;
            continue;
        }

        // Predict using table
        auto it = table_.find({top,cur});
        if (it != table_.end()) {
            cout << "Apply: " << top << " -> " << it->second << "\n";
            st.pop();
            string rhs = it->second;
            stringstream rs(rhs);
            vector<string> syms;
            while (rs >> tok) syms.push_back(tok);
            pushRev(syms);
        } else {
            cout << "Error: no rule for (" << top << "," << cur << ")\n";
            break;
        }
    }

    if (st.empty() && input[ip] == "$")
        cout << "\nParsing successful\n";
    else
        cout << "\nParsing failed\n";

    return 0;
}

Lab 08--(predictive parser for the mini language specified)

#include <bits/stdc++.h>
using namespace std;

#define MAX 100

string parseStack[MAX];
int top = -1;
vector<string> input;
int ip = 0;

void push(const string& symbol) {
    if (symbol != "epsilon") {  // Changed from ε to "epsilon"
        parseStack[++top] = symbol;
    }
}

void pushRule(const vector<string>& rule) {
    for (int i = rule.size() - 1; i >= 0; --i) {
        push(rule[i]);
    }
}

int main() {
    string expr;
    cout << "Enter space-separated input (e.g., id + id * id): ";
    getline(cin, expr);

    stringstream ss(expr);
    string token;

    while (ss >> token) input.push_back(token);
    input.push_back("$");

    push("$");
    push("E");

    while (top >= 0) {
        string topSym = parseStack[top];
        string current = input[ip];

        if (topSym == current) {
            top--;
            ip++;
        } else if (topSym == "E") {
            if (current == "id" || current == "(") {
                top--;
                pushRule({"T", "E'"});
                cout << "Apply: E -> T E'\n";
            } else {
                cout << "Error at E\n";
                break;
            }
        } else if (topSym == "E'") {
            if (current == "+") {
                top--;
                pushRule({"+", "T", "E'"});
                cout << "Apply: E' -> + T E'\n";
            } else if (current == ")" || current == "$") {
                top--;
                cout << "Apply: E' -> epsilon\n";
            } else {
                cout << "Error at E'\n";
                break;
            }
        } else if (topSym == "T") {
            if (current == "id" || current == "(") {
                top--;
                pushRule({"F", "T'"});
                cout << "Apply: T -> F T'\n";
            } else {
                cout << "Error at T\n";
                break;
            }
        } else if (topSym == "T'") {
            if (current == "*") {
                top--;
                pushRule({"*", "F", "T'"});
                cout << "Apply: T' -> * F T'\n";
            } else if (current == "+" || current == ")" || current == "$") {
                top--;
                cout << "Apply: T' -> epsilon\n";
            } else {
                cout << "Error at T'\n";
                break;
            }
        } else if (topSym == "F") {
            if (current == "id") {
                top--;
                push("id");
                cout << "Apply: F -> id\n";
            } else if (current == "(") {
                top--;
                pushRule({")", "E", "("});
                cout << "Apply: F -> ( E )\n";
            } else {
                cout << "Error at F\n";
                break;
            }
        } else {
            cout << "Error: unmatched symbol " << topSym << endl;
            break;
        }
    }

    if (top < 0 && input[ip] == "$") {
        cout << "\nParsing successful\n";
    } else {
        cout << "\nParsing failed\n";
    }

    return 0;
}

Lab 9--
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char *inp;  // Input pointer

void E(), E1(), T(), T1(), F();
void error() { printf("Syntax Error\n"); exit(1); }

void match(char c) {
    if (*inp == c) {
        printf("  Matched '%c'\n", c);
        inp++;
    } else {
        error();
    }
}

// E → T E'
void E() {
    printf("E  -> T E'\n");
    T();
    E1();
}

// E' → + T E' | ε
void E1() {
    if (*inp == '+') {
        printf("E' -> + T E'\n");
        match('+');
        T();
        E1();
    } else {
        printf("E' -> eps\n");
    }
}

// T → F T'
void T() {
    printf("T  -> F T'\n");
    F();
    T1();
}

// T' → * F T' | ε
void T1() {
    if (*inp == '*') {
        printf("T' -> * F T'\n");
        match('*');
        F();
        T1();
    } else {
        printf("T' -> eps\n");
    }
}

// F → ( E ) | id
void F() {
    if (*inp == '(') {
        printf("F  -> ( E )\n");
        match('(');
        E();
        match(')');
    }
    else if (*inp == 'i' && *(inp+1)=='d') {
        printf("F  -> id\n");
        match('i');
        match('d');
    }
    else {
        error();
    }
}

int main() {
    static char buf[100];
    printf("Enter tokenized input (use 'id' and append $): ");
    scanf("%99s", buf);
    inp = buf;

    printf("\n--- Recursive‐Descent Trace ---\n");
    E();

    if (*inp == '$') {
        printf("Parsing complete: input accepted \n");
    } else {
        error();
    }
    return 0;
}


Lab 10--Design a Predictive Parser for the following grammar 
             G: {E-> TE’, E’ -> +TE’ | 0, T-> FT’, T’-> *FT’|0, F-> (E) | id}.

#include <iostream>
#include <string>
#include <cctype>
using namespace std;

string input;
size_t pos;
char lookahead;

void nextToken() {
    if (pos < input.size()) {
        lookahead = input[pos++];
    } else {
        lookahead = '$';
    }
}

void match(char expected) {
    if (lookahead == expected) {
        cout << "Matched: " << (expected=='a'? "id" : string(1,expected)) << "\n";
        nextToken();
    } else {
        cerr << "Syntax Error: expected '" << expected
             << "' but found '" << lookahead << "'\n";
        exit(1);
    }
}

// Grammar:
// E  → T E'
// E' → + T E' | ε
// T  → F T'
// T' → * F T' | ε
// F  → ( E ) | id

void E();
void EPrime();
void T();
void TPrime();
void F();

void E() {
    cout << "E -> T E'\n";
    T();
    EPrime();
}

void EPrime() {
    if (lookahead == '+') {
        cout << "E' -> + T E'\n";
        match('+');
        T();
        EPrime();
    } else {
        // epsilon: no output needed
    }
}

void T() {
    cout << "T -> F T'\n";
    F();
    TPrime();
}

void TPrime() {
    if (lookahead == '*') {
        cout << "T' -> * F T'\n";
        match('*');
        F();
        TPrime();
    } else {
        // epsilon
    }
}

void F() {
    if (lookahead == '(') {
        cout << "F -> ( E )\n";
        match('(');
        E();
        match(')');
    } else if (lookahead == 'a') {
        cout << "F -> id\n";
        match('a');
    } else {
        cerr << "Syntax Error: unexpected '" << lookahead << "' in F\n";
        exit(1);
    }
}

int main() {
    cout << "Predictive Parser for the Grammar:\n"
         << "E  -> T E'\n"
         << "E' -> + T E' | epsilon\n"
         << "T  -> F T'\n"
         << "T' -> * F T' | epsilon\n"
         << "F  -> ( E ) | id\n\n";

    cout << "Enter an expression (use id, +, *, parentheses): ";
    getline(cin, input);

    // replace "id" with 'a' and strip spaces
    string tmp;
    for (size_t i = 0; i+1 < input.size(); ) {
        if (input[i]=='i' && input[i+1]=='d') {
            tmp.push_back('a');
            i+=2;
        } else if (!isspace((unsigned char)input[i])) {
            tmp.push_back(input[i++]);
        } else {
            ++i;
        }
    }
    input = tmp;
    input.push_back('$');

    pos = 0;
    nextToken();

    cout << "\n--- Parsing Begins ---\n";
    E();

    if (lookahead == '$') {
        cout << "\nParsing completed successfully! Input is valid.\n";
    } else {
        cerr << "\nSyntax Error: extra input after end of parse: '"<<lookahead<<"'\n";
        return 1;
    }
    return 0;
}


Lab 11--Write a program to calculate First and Follow sets of given grammar.

#include <bits/stdc++.h>
using namespace std;

map<char, vector<string>> grammar;
map<char, set<char>> firstSet, followSet;
set<char> nonTerminals;
set<char> terminals;
char startSymbol;

// Check if a character is a terminal
bool isTerminal(char c) {
    return !isupper(c) && c != 'e'; // 'e' represents epsilon
}

void computeFirst(char symbol);

// Get FIRST set of a string (sequence of symbols)
set<char> getFirstOfString(const string& str) {
    set<char> result;

    if (str.empty()) {
        result.insert('e');
        return result;
    }

    for (size_t i = 0; i < str.size(); ++i) {
        char c = str[i];
        set<char> firstC;

        if (isTerminal(c)) {
            result.insert(c);
            break;
        } else {
            computeFirst(c);
            firstC = firstSet[c];

            for (char f : firstC) {
                if (f != 'e') result.insert(f);
            }

            if (firstC.find('e') == firstC.end()) {
                break;
            } else if (i == str.size() - 1) {
                result.insert('e');
            }
        }
    }

    return result;
}

// Compute FIRST set of a non-terminal
void computeFirst(char symbol) {
    if (!firstSet[symbol].empty()) return;

    for (size_t i = 0; i < grammar[symbol].size(); ++i) {
        string prod = grammar[symbol][i];
        set<char> tempFirst = getFirstOfString(prod);
        firstSet[symbol].insert(tempFirst.begin(), tempFirst.end());
    }
}

// Compute FOLLOW set of a non-terminal
void computeFollow(char symbol) {
    for (map<char, vector<string>>::iterator it = grammar.begin(); it != grammar.end(); ++it) {
        char nt = it->first;
        vector<string> prods = it->second;

        for (size_t j = 0; j < prods.size(); ++j) {
            string prod = prods[j];

            for (size_t i = 0; i < prod.length(); ++i) {
                if (prod[i] == symbol) {
                    if (i + 1 < prod.length()) {
                        string next = prod.substr(i + 1);
                        set<char> firstNext = getFirstOfString(next);

                        for (char f : firstNext) {
                            if (f != 'e') followSet[symbol].insert(f);
                        }

                        if (firstNext.find('e') != firstNext.end()) {
                            if (nt != symbol) {
                                computeFollow(nt);
                                followSet[symbol].insert(followSet[nt].begin(), followSet[nt].end());
                            }
                        }
                    } else if (nt != symbol) {
                        computeFollow(nt);
                        followSet[symbol].insert(followSet[nt].begin(), followSet[nt].end());
                    }
                }
            }
        }
    }
}

// MAIN
int main() {
    cout << "Lab 11: FIRST and FOLLOW Sets\n";
    cout << "Enter number of productions: ";
    int n;
    cin >> n;
    cin.ignore();

    cout << "Enter productions (e.g., E->TG or G->+TG|e):\n";
    for (int i = 0; i < n; ++i) {
        string line;
        getline(cin, line);
        line.erase(remove(line.begin(), line.end(), ' '), line.end());

        char lhs = line[0];
        if (i == 0) startSymbol = lhs;

        size_t arrow = line.find("->");
        string rhs = line.substr(arrow + 2);

        stringstream ss(rhs);
        string token;
        while (getline(ss, token, '|')) {
            grammar[lhs].push_back(token);
            for (char c : token) {
                if (isupper(c)) nonTerminals.insert(c);
                else if (c != 'e') terminals.insert(c);  // ignore epsilon in terminals
            }
        }

        nonTerminals.insert(lhs);
    }

    // FIRST
    for (char nt : nonTerminals) {
        computeFirst(nt);
    }

    // FOLLOW
    followSet[startSymbol].insert('$');
    for (char nt : nonTerminals) {
        computeFollow(nt);
    }

    cout << "\nFIRST sets:\n";
    for (char nt : nonTerminals) {
        cout << "FIRST(" << nt << ") = { ";
        for (char f : firstSet[nt]) cout << f << " ";
        cout << "}\n";
    }

    cout << "\nFOLLOW sets:\n";
    for (char nt : nonTerminals) {
        cout << "FOLLOW(" << nt << ") = { ";
        for (char f : followSet[nt]) cout << f << " ";
        cout << "}\n";
    }

    return 0;
}


Lab 12--Write a program to implement top-down parsing for a given Grammar.

#include <bits/stdc++.h>
using namespace std;

// Input and parsing position
string input;
int position = 0;
char lookahead;

// Function declarations
bool E();
bool Eprime();
bool T();
bool Tprime();
bool F();
void match(char expected);
void error(const string& msg);
void nextToken();

void nextToken() {
    if (position < input.length()) {
        lookahead = input[position++];
        while (isspace(lookahead)) {
            lookahead = input[position++];
        }
    } else {
        lookahead = '$'; // End marker
    }
}

void match(char expected) {
    if (lookahead == expected) {
        cout << "Matched: " << expected << "\n";
        nextToken();
    } else {
        error("Expected '" + string(1, expected) + "', found '" + string(1, lookahead) + "'");
    }
}

void error(const string& msg) {
    cerr << "Error: " << msg << "\n";
    exit(1);
}

// Grammar functions
bool E() {
    cout << "E -> T E'\n";
    return T() && Eprime();
}

bool Eprime() {
    cout << "E' -> + T E' | (epsilon)\n";
    if (lookahead == '+') {
        match('+');
        return T() && Eprime();
    }
    // E' -> epsilon
    return true;
}

bool T() {
    cout << "T -> F T'\n";
    return F() && Tprime();
}

bool Tprime() {
    cout << "T' -> * F T' | (epsilon)\n";
    if (lookahead == '*') {
        match('*');
        return F() && Tprime();
    }
    // T' -> epsilon
    return true;
}

bool F() {
    cout << "F -> ( E ) | id\n";
    if (lookahead == '(') {
        match('(');
        if (!E()) return false;
        match(')');
        return true;
    } else if (isalnum(lookahead)) {
        match(lookahead); // id = single alphanumeric
        return true;
    } else {
        error("Unexpected symbol '" + string(1, lookahead) + "' in F");
        return false;
    }
}

int main() {
    cout << "Top-Down Parser for the Grammar:\n";
    cout << "E  -> T E'\n";
    cout << "E' -> + T E' | (epsilon)\n";
    cout << "T  -> F T'\n";
    cout << "T' -> * F T' | (epsilon)\n";
    cout << "F  -> ( E ) | id\n\n";

    cout << "Enter an expression (e.g., id+id*id or (id+id)*id): ";
    getline(cin, input);

    // Replace 'id' with single char 'a' for simplicity
    size_t pos = 0;
    while ((pos = input.find("id", pos)) != string::npos) {
        input.replace(pos, 2, "a");
        pos += 1;
    }

    input += '$'; // End marker
    position = 0;
    nextToken();

    cout << "\nParsing Steps:\n";
    bool result = E();

    if (result && (lookahead == '$' || lookahead == '\0')) {
        cout << "\nParsing completed successfully!\n";
    } else {
        cout << "\nParsing failed. Unexpected input at position " << position << ".\n";
    }

    return 0;
}


Lab 13-- Write a Program to implement bottom-up parsing for a given Grammar.

#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX 100

char stack_[MAX];
char input[MAX];
int sp = 0;  // stack pointer

void print_step(const char *prod) {
    printf("%s\n", prod);
}

// Try one reduction in the order:
//  1) F -> id
//  2) T -> T * F
//  3) T -> F
//  4) E -> E + T
// Returns 1 if a reduction happened, 0 otherwise.
int try_reduce() {
    // 1) F -> id  (id encoded as 'a')
    if (sp>=1 && stack_[sp-1]=='a') {
        sp--;
        stack_[sp++] = 'F';
        print_step("F -> id");
        return 1;
    }
    // 2) T -> T * F
    if (sp>=3 && stack_[sp-3]=='T' && stack_[sp-2]=='*' && stack_[sp-1]=='F') {
        sp -= 3;
        stack_[sp++] = 'T';
        print_step("T -> T * F");
        return 1;
    }
    // 3) T -> F
    if (sp>=1 && stack_[sp-1]=='F') {
        sp--;
        stack_[sp++] = 'T';
        print_step("T -> F");
        return 1;
    }
    // 4) E -> E + T
    if (sp>=3 && stack_[sp-3]=='E' && stack_[sp-2]=='+' && stack_[sp-1]=='T') {
        sp -= 3;
        stack_[sp++] = 'E';
        print_step("E -> E + T");
        return 1;
    }
    return 0;
}

int main(){
    printf("Bottom-Up Parser for the Grammar:\n");
    printf("E  -> E + T | T\n");
    printf("T  -> T * F | F\n");
    printf("F  -> id | ( E )\n\n");

    printf("Enter an expression (use 'id' for identifiers, e.g. id+id*id): ");
    fgets(input, MAX, stdin);

    // preprocess: replace "id" with 'a', drop spaces, append $
    int j=0;
    for (int i=0; input[i]; i++){
        if (input[i]=='i' && input[i+1]=='d'){
            input[j++] = 'a';
            i++;
        } else if (!isspace((unsigned char)input[i])){
            input[j++] = input[i];
        }
    }
    input[j++] = '$';
    input[j]   = '\0';

    printf("\nParsing Steps:\n");
    int ip = 0;
    while (input[ip] && input[ip] != '$') {
        // SHIFT
        char c = input[ip++];
        stack_[sp++] = c;
        printf("Shift: %c\n", (c=='a'?'i':c));

        // apply reductions until none apply
        while (try_reduce()) {}
    }

    // final reduction: E -> T if stack == 'T'
    if (sp==1 && stack_[0]=='T') {
        stack_[0] = 'E';
        print_step("E -> T");
    }

    // accept if stack is exactly 'E'
    if (sp==1 && stack_[0]=='E') {
        printf("\nParsing completed successfully!\n");
    } else {
        printf("\nError: invalid input (final stack=");
        for (int k=0; k<sp; k++) putchar(stack_[k]);
        printf(")\n");
    }
    return 0;
}


Lab 14--Write a Program to construct a syntax tree for a given input.

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

typedef struct Node {
    char *label;
    struct Node *left, *right;
} Node;

char *inp;  // pointer into the input string

// Function prototypes
Node* parseE();
Node* parseT();
Node* parseF();
Node* newNode(const char *label, Node* l, Node* r);
void  printTree(Node* node, int indent);

int main() {
    char expr[100];
    printf("Enter expression (no spaces, e.g. a-4+c): ");
    if (scanf("%99s", expr) != 1) return 0;
    inp = expr;

    Node* root = parseE();
    printf("\nSyntax Tree:\n");
    printTree(root, 0);

    // (In a real exam you might free the tree here)
    return 0;
}

// E -> T { (+|-) T }
Node* parseE() {
    Node* node = parseT();
    while (*inp == '+' || *inp == '-') {
        char op = *inp++;
        char buf[2] = {op, '\0'};
        Node* right = parseT();
        node = newNode(buf, node, right);
    }
    return node;
}

// T -> F { (*|/) F }
Node* parseT() {
    Node* node = parseF();
    while (*inp == '*' || *inp == '/') {
        char op = *inp++;
        char buf[2] = {op, '\0'};
        Node* right = parseF();
        node = newNode(buf, node, right);
    }
    return node;
}

// F -> '(' E ')' | id | num
Node* parseF() {
    if (*inp == '(') {
        inp++;                      // consume '('
        Node* node = parseE();
        if (*inp == ')') inp++;    // consume ')'
        return node;
    }
    // identifier (letter-start) or number (digit-start)
    if (isalpha((unsigned char)*inp) || isdigit((unsigned char)*inp)) {
        char buf[100];
        int i = 0;
        // gather alphanumeric token
        while (isalnum((unsigned char)*inp)) {
            buf[i++] = *inp++;
        }
        buf[i] = '\0';
        return newNode(buf, NULL, NULL);
    }
    // error
    fprintf(stderr, "Error: unexpected '%c'\n", *inp);
    exit(1);
}

// Allocate a new node with given label and children
Node* newNode(const char *label, Node* l, Node* r) {
    Node* n = malloc(sizeof(Node));
    if (!n) { perror("malloc"); exit(1); }
    n->label = strdup(label);
    n->left  = l;
    n->right = r;
    return n;
}

// Print the tree upright with ASCII “<-” and “->” arrows
// indent = number of levels from the root
void printTree(Node* node, int indent) {
    if (!node) return;
    // root
    if (indent == 0) {
        printf("%s\n", node->label);
    }
    // left subtree
    if (node->left) {
        for (int i = 0; i < indent; i++) printf("  ");
        printf("<- %s\n", node->left->label);
        printTree(node->left, indent + 1);
    }
    // right subtree
    if (node->right) {
        for (int i = 0; i < indent; i++) printf("  ");
        printf("-> %s\n", node->right->label);
        printTree(node->right, indent + 1);
    }
}

Lab 15--Write a program to generate the three-address code from a source-language expression.

#include <iostream>
#include <string>
#include <vector>
#include <cctype>

using namespace std;

int tempVarCount = 1;

string newTemp() {
    return "t" + to_string(tempVarCount++);
}

struct TAC {
    string result;
    string arg1;
    string op;
    string arg2;
};

vector<TAC> code;

string generateTAC(string expr, int &pos);

string parseFactor(string expr, int &pos) {
    while (pos < expr.length() && isspace(expr[pos])) pos++;

    if (expr[pos] == '(') {
        pos++; // skip '('
        string inner = generateTAC(expr, pos);
        if (expr[pos] == ')') pos++; // skip ')'
        return inner;
    }

    if (isalnum(expr[pos])) {
        string var(1, expr[pos++]);
        return var;
    }

    return "";
}

string parseTerm(string expr, int &pos) {
    string left = parseFactor(expr, pos);

    while (pos < expr.length()) {
        while (pos < expr.length() && isspace(expr[pos])) pos++;
        if (expr[pos] == '*' || expr[pos] == '/') {
            char op = expr[pos++];
            string right = parseFactor(expr, pos);
            string temp = newTemp();
            code.push_back({temp, left, string(1, op), right});
            left = temp;
        } else {
            break;
        }
    }

    return left;
}

string generateTAC(string expr, int &pos) {
    string left = parseTerm(expr, pos);

    while (pos < expr.length()) {
        while (pos < expr.length() && isspace(expr[pos])) pos++;
        if (expr[pos] == '+' || expr[pos] == '-') {
            char op = expr[pos++];
            string right = parseTerm(expr, pos);
            string temp = newTemp();
            code.push_back({temp, left, string(1, op), right});
            left = temp;
        } else {
            break;
        }
    }

    return left;
}

int main() {
    string expression;
    cout << "Enter an arithmetic expression: ";
    getline(cin, expression);

    int pos = 0;
    string finalResult = generateTAC(expression, pos);

    cout << "\nThree Address Code:\n";
    for (const auto& instr : code) {
        cout << instr.result << " = " << instr.arg1 << " " << instr.op << " " << instr.arg2 << endl;
    }

    cout << "\nFinal result stored in: " << finalResult << endl;

    return 0;
}


